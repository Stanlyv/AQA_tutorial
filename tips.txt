CSS
    id - #bullet - [id="bullet"]
    class - .class - .class1.class2 - [class="class name]
    tag - div - img - p1
    any attribute -  [attribute="attribute value"] - [name="attribute value"]

    Символ пробела " " является значащим в CSS-селекторах. Это важный символ, который разделяет описание предка и потомка.
    Если бы мы записали селектор #post2.title без пробела, то в данном примере не было найдено ни одного элемента.
    Такая запись означала бы, что мы хотим найти элемент, который одновременно содержит id "post2" и класс "title".
    Таким образом #post2 .title и #post2.title — это разные селекторы.

    #post2 > div.title
    Здесь мы указали еще тег элемента div и уточнили, что нужно взять элемент с тегом и классом: div.title,
    который находится строго на один уровень иерархии ниже чем элемент #post2. Для этого используется символ >.

    #posts > .item:nth-child(2) > .title

    Псевдо-класс :nth-child(2) — позволяет найти второй по порядку элемент среди дочерних элементов для #posts.
    Затем с помощью конструкции > .title мы указываем, что нам нужен элемент .title,
    родителем которого является найденный ранее элемент .item

XPath
    el1/el2 — выбирает элементы el2, являющиеся прямыми потомками el1;
    el1//el2 — выбирает элементы el2, являющиеся потомками el1 любой степени вложенности.

    Правил фильтрации [] очень много:

    по любому атрибуту, будь то id, class, title (или любой другой).
        Например, мы хотим найти картинку с летящим котом, для этого можно выполнить запрос //img[@id='bullet']
    по порядковому номеру. Допустим, мы хотим выбрать вторую по порядку карточку с котом.
        Для этого найдем элемент с классом "row" и возьмем его второго потомка: //div[@class="row"]/div[2]
    по полному совпадению текста. Да, XPath — это единственный способ найти элемент по внутреннему тексту.
        Если мы хотим найти блок текста с котом-Лениным, можно воспользоваться XPath селектором //p[text()="Lenin cat"].
        Такой селектор вернет элемент, только если текст полностью совпадет. Здесь важно сказать, что не всегда
        поиск по тексту — это хорошая практика, особенно в случае мультиязычных сайтов.
    по частичному совпадению текста или атрибута. Для этого нужна функция contains.
        Запрос //p[contains(text(), "cat")] вернет нам все абзацы текста, которые содержат слово cat.
        Точно так же можно искать по частичному совпадению других атрибутов, это удобно,
        если у элемента несколько классов. Посмотрите на код навбара сайта с котами.
        Его можно найти селектором //div[contains(@class, "navbar")]
    в фильтрации еще можно использовать булевы операции (and, or, not) и некоторые простые арифметические
        выражения (но вообще не стоит, наверное). Допустим, мы хотим найти картинку
        обязательно с data-type "animal" и именем "bullet-cat",
            для этого подойдет запрос: //img[@name='bullet-cat' and @data-type='animal']

    * - выбор всех элементов
        //div/*[@class="jumbotron-heading"]

Selenium

    find_element(By.ID, value) — поиск по уникальному атрибуту id элемента.
        Если ваши разработчики проставляют всем элементам в приложении уникальный id, то вам повезло,
        и вы чаще всего будет использовать этот метод, так как он наиболее стабильный;
    find_element(By.CSS_SELECTOR, value) — поиск элемента с помощью правил на основе CSS.
        Это универсальный метод поиска, так как большинство веб-приложений использует CSS для вёрстки
        и задания оформления страницам. Если find_element_by_id вам не подходит из-за отсутствия id у элементов,
        то скорее всего вы будете использовать именно этот метод в ваших тестах;
    find_element(By.XPATH, value) — поиск с помощью языка запросов XPath,
        позволяет выполнять очень гибкий поиск элементов;
    find_element(By.NAME, value) — поиск по атрибуту name элемента;
    find_element(By.TAG_NAME, value) — поиск элемента по названию тега элемента;
    find_element(By.CLASS_NAME, value) — поиск по значению атрибута class;
    find_element(By.LINK_TEXT, value) — поиск ссылки на странице по полному совпадению;
    find_element(By.PARTIAL_LINK_TEXT, value) — поиск ссылки на странице,
        если текст селектора совпадает с любой частью текста ссылки.


Wait until available
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    ...
    button = WebDriverWait(browser, 5).until(
        EC.element_to_be_clickable((By.ID, "verify"))
    ) ...

    В модуле expected_conditions есть много других правил, которые позволяют реализовать необходимые ожидания:

    title_is
    title_contains
    presence_of_element_located
    visibility_of_element_located
    visibility_of
    presence_of_all_elements_located
    text_to_be_present_in_element
    text_to_be_present_in_element_value
    frame_to_be_available_and_switch_to_it
    invisibility_of_element_located
    element_to_be_clickable
    staleness_of
    element_to_be_selected
    element_located_to_be_selected
    element_selection_state_to_be
    element_located_selection_state_to_be
    alert_is_present

    Если мы захотим проверять, что кнопка становится неактивной после отправки данных,
        то можно задать негативное правило с помощью метода until_not:

    # говорим Selenium проверять в течение 5 секунд пока кнопка станет неактивной
    button = WebDriverWait(browser, 5).until_not(
            EC.element_to_be_clickable((By.ID, "verify"))
        )